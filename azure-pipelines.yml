# A pipeline is made up of one or more stages. A pipeline can deploy to one or more environments.
# Stages -> Jobs (can be parallel) -> Steps (each step runs in it's own process)

# A trigger tells a Pipeline to run.
trigger:
- master
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
# A stage is a logical boundary in the pipeline. It can be used to mark 
# separation of concerns (for example, Build, QA, and production)
- stage: build
  displayName: 'Build, Test, Publish'
  jobs:
  # Each job runs on one agent. A job can also be agentless.
    - job: build
      displayName: 'Build job'
      steps:
      # A step can be a task or script and is the smallest building block of a pipeline.     
            
      - task: UseDotNet@2
        displayName: 'Install .NET 7 SDK'
        inputs:
          version: '7.x'
          performMultiLevelLookup: true
          includePreviewVersions: false

      #- task: DotNetCoreCLI@2
      #  displayName: 'Run dotnet build'
      #  inputs:
      #    command: build
      #    projects: '**/*.csproj'
      #    arguments: '--configuration $(buildConfiguration)'

      - script: |
          docker version
          docker run --name mymssqlserver -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=myPa55w0rd' -p 1433:1433 -e 'MSSQL_PID=Standard' -d mcr.microsoft.com/mssql/server:2019-latest
        displayName: 'Start MSSQL Server Container'

      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet test'
        inputs:
          command: 'test'
          projects: '**/*Test/*.csproj'
          arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
          #arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
          publishTestResults: true
          testRunTitle: '---Run Unit Test---'
      
      - script: dotnet tool install --global dotnet-reportgenerator-globaltool
        displayName: 'Install ReportGenerator'
        
      - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
        displayName: 'Run ReportGenerator'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'
          #summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      
      # An artifact is a collection of files or packages published by a run.
      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet publish'
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifact'
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifact: 'drop'
          publishLocation: 'pipeline'

- stage: deploy_to_dev
  displayName: 'Deploy to DEV'
  dependsOn: build
  jobs:
  - deployment: DeployWebApi
    displayName: 'Deploy Web Api'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo 'Deployed to Dev'

- stage: deploy_to_test
  displayName: 'Deploy to TEST'
  dependsOn:  [build,deploy_to_dev]
  jobs:
  - deployment: DeployWebApi
    displayName: 'Deploy Web Api'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: 'drop'
              targetPath: '$(Pipeline.Workspace)/drop'
          - script: echo 'Deployed to Test'
 
- stage: deploy_to_prod
  displayName: 'Deploy to PROD'
  dependsOn:  [build,deploy_to_test]
  jobs:
  - deployment: DeployWebApi
    displayName: 'Deploy Web Api'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: 'drop'
              targetPath: '$(Pipeline.Workspace)/drop'
          - script: echo 'Deployed to Production'